@startuml
namespace mtm{
class Game{
    -vector<vector<std::shared_ptr>> board
    +void addCharacter(const GridPoint&, std::shared_ptr<Character>)
    +std::ostream& operator<<(std::ostream&, const mtm::Game&)
    +void move(const GridPoint &, const GridPoint&)
    +void attack(const GridPoint &, const GridPoint&)
    +void reload(const GridPoint&)
    +void clearDead()
    +void fillSecondaryTargetsList(const GridPoint, const GridPoint)
    +bool isOver(Team* winningTeam) const
}
abstract class Character{
    #Team team
    #units_t health
    #units_t ammo
    #units_t range
    #units_t power
    +{abstract} virtual CharacterType getType()
    +{abstract} virtual Character* clone() const
    +{abstract} virtual bool isMoveLegal(units_t)
    +{abstract} virtual bool isAttackLegal(const GridPoint&, const GridPoint&)
    +{abstract} virtual bool isTargetLegal(const std::shared_ptr<Character>&)
    +{abstract} virtual bool isTargetPositionLegal(const GridPoint&, const GridPoint&)
    +{abstract} virtual void attack(std::shared_ptr<Character>&)
    +{abstract} virtual void reload()
    +virtual bool isAmmoSufficient(const std::shared_ptr<Character>&)
    +virtual void attackSecondary(std::shared_ptr<Character>&)
    +void attack(std::list<std::shared_ptr<Character>>&)
    +void hurt(units_t)
    +void heal(units_t)
    +bool isAlive()
    +virtual bool isSecondaryTarget(GridPoint, GridPoint)
}
class Medic implements Character{
	-{static} const units_t MEDIC_MAX_MOVE=5
	-{static} const units_t MEDIC_CHARGE=5
}
class Sniper implements Character{
    -{static} const units_t SNIPER_MAX_MOVE=4;
    -{static} const units_t SNIPER_CHARGE=2;
    -{static} const units_t SNIPER_MIN_RANGE=2;
    -{static} const units_t SNIPER_DOUBLE_POWER=2;
    -units_t attack_counter=0;
}
class Soldier implements Character{
    -{static} const units_t SOLDIER_MAX_MOVE=3;
    -{static} const units_t SOLDIER_CHARGE=3;
    -{static} const units_t SOLDIER_SECONDARY_RANGE=3;
    -{static} const units_t SOLDIER_SECONDARY_EFFECT=2;
}
class GridPoint{
    -int row
    -int col
    -{static} int distance(const GridPoint&, const GridPoint&)
}
class Dimensions{
    -int height
    -int width
    +std::string toString() const
}
enum Team {
    Powerlifters
    Crossfitters
}
enum CharacterType {
	SOLDIER
	MEDIC
	SNIPER
}
class Exception implements std::exception {
    #const char* game_error_str="A game related error has occurred: "
    +{abstract} virtual const char* what() const noexcept=0;
}
class GameException implements Exception{
    -const char* error_name;
    #const char full_error [ERROR_LENGTH]={0}
}
class IllegalArgument implements GameException{}
class IllegalCell implements GameException{}
class CellEmpty implements GameException{}
class MoveTooFar implements GameException{}
class CellOccupied implements GameException{}
class OutOfRange implements GameException{}
class OutOfAmmo implements GameException{}
class IllegalTarget implements GameException{}
Character o-- GridPoint
Character o-- CharacterType
Character o-- Team
Game o-- GridPoint
Game o-- Dimensions
}

@enduml