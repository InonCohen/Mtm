@startuml
namespace mtm{
abstract class Character{
    #Team team
    #units_t health
    #units_t ammo
    #units_t range
    #units_t power
    +{abstract} virtual CharacterType getType()
    +{abstract} virtual Character* clone() const
    +{abstract} virtual bool isMoveLegal(units_t)
    +{abstract} virtual bool isAttackLegal(const GridPoint&, const GridPoint&)
    +{abstract} virtual bool isTargetLegal(const std::shared_ptr<Character>&)
    +{abstract} virtual bool isTargetPositionLegal(const GridPoint&, const GridPoint&)
    +{abstract} virtual void attack(std::shared_ptr<Character>&)
    +{abstract} virtual void reload()
    +virtual bool isAmmoSufficient(const std::shared_ptr<Character>&)
    +virtual void attackSecondary(std::shared_ptr<Character>&)
    +void attack(std::list<std::shared_ptr<Character>>&)
    +void hurt(units_t)
    +void heal(units_t)
    +bool isAlive()
    +virtual bool isSecondaryTarget(GridPoint, GridPoint)
}
class Medic extends Character{
	-{static} const units_t MEDIC_MAX_MOVE=5
	-{static} const units_t MEDIC_CHARGE=5
}
class Sniper extends Character{
    -{static} const units_t SNIPER_MAX_MOVE=4;
    -{static} const units_t SNIPER_CHARGE=2;
    -{static} const units_t SNIPER_MIN_RANGE=2;
    -{static} const units_t SNIPER_DOUBLE_POWER=2;
    -units_t attack_counter=0;
}
class Soldier extends Character{
    -{static} const units_t SOLDIER_MAX_MOVE=3;
    -{static} const units_t SOLDIER_CHARGE=3;
    -{static} const units_t SOLDIER_SECONDARY_RANGE=3;
    -{static} const units_t SOLDIER_SECONDARY_EFFECT=2;
}
class Game{
    -Board<Character> gameBoard
    +void addCharacter(const GridPoint&, std::shared_ptr<Character>)
    +std::ostream& operator<<(std::ostream&, const mtm::Game&)
    +void move(const GridPoint &, const GridPoint&)
    +void attack(const GridPoint &, const GridPoint&)
    +void reload(const GridPoint&)
    +void clearDead()
    +void fillSecondaryTargetsList(const GridPoint, const GridPoint)
    +bool isOver(Team* winningTeam) const
}
class Board<T>{
    -const int height
    -const int width
    -vector<vector<std::shared_ptr>> board
    -bool isCellLegal(GridPoint)
    +void addItem(T, GridPoint)
    +void removeItem(GridPoint)
    +void moveItem(GridPoint, GridPoint)
    +std::ostream& operator<<(std::ostream &os, const mtm::Game& game)
}
class GridPoint{
    -int row
    -int col
    -{static} int distance(const GridPoint&, const GridPoint&)
}
enum Team {
    Powerlifters
    Crossfitters
}
enum CharacterType {
	SOLDIER
	MEDIC
	SNIPER
}
abstract class Exception implements std::exception {
    #const char* game_error_str="A game related error has occurred: "
    +{abstract} virtual const char* what() const noexcept=0
}
class GameException extends Exception{
    -const char* error_name
    #const char* full_error
}
class IllegalArgument extends GameException{}
class IllegalCell extends GameException{}
class CellEmpty extends GameException{}
class MoveTooFar extends GameException{}
class CellOccupied extends GameException{}
class OutOfRange extends GameException{}
class OutOfAmmo extends GameException{}
class IllegalTarget extends GameException{}
Character *-- CharacterType
Character *-- Team
Game o-- Character
Game *-- Board
Game *-- GridPoint
Board *-- GridPoint
}
@enduml